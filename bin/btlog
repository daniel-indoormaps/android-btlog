#!/usr/bin/env ruby
#vim:ft=ruby

ENV['BUNDLE_GEMFILE']=File.dirname( File.realpath( __FILE__ ) ) + "/../Gemfile"

require 'bundler/setup'

require 'main'

#$:.push File.dirname( File.realpath(__FILE__)) + "/../lib"

require 'android/log_scan'

class BluetoothAdapter
    include Android::LogScan

    #From BluetoothAdapterStateMachine.java
    Messages = { 
        "1" => "USER_TURN_ON", 
        "2" => "USER_TURN_OFF",
        "3" => "PER_PROCESS_TURN_ON",
        "4" => "PER_PROCESS_TRUN_OFF",
        "5" => "TRUN_HOT",
        "51" => "SERVICE_RECORD_LOADED",
        "52" => "ALL_DEVICES_DISCONNECTED",
        "53" => "SCAN_MODE_CHANGED",
        "54" => "POWER_STATE_CHANGED",
        "55" => "AIRPLANE_MODE_ON",
        "56" => "AIRPLANE_MODE_OFF",

       "101" =>  "TURN_ON_CONTINUE",
       "102" => "TURN_COLD",
       "103" => "DEVICES_DISCONNECT_TIMEOUT",
       "104" => "PREPARE_BLUETOOTH_TIMEOUT",
       "105" => "POWER_DOWN_TIMEOUT",
    }

    States = {
        #From BluetoothAdapter.java
        nil =>"Unkown",
        "10" => "BluetoothAdapter.STATE_OFF",
        "11" => "BluetoothAdapter.STATE_TURNING_ON",
        "12" => "BluetoothAdapter.STATE_ON",
        "13" => "BluetoothAdapter.STATE_TURNING_OFF"
    }

    DeviceProfileMessages = {
        "1"=>"CONNECT_HFP_OUTGOING",
        "2"=>"CONNECT_HFP_INCOMING",
        "3"=>"CONNECT_A2DP_OUTGOING",
        "4"=>"CONNECT_A2DP_INCOMING",
        "5"=>"CONNECT_HID_OUTGOING",
        "6"=>"CONNECT_HID_INCOMING",
        "50"=>"DISCONNECT_HFP_OUTGOING",
        "51"=>"DISCONNECT_HFP_INCOMING",
        "52"=>"DISCONNECT_A2DP_OUTGOING",
        "53"=>"DISCONNECT_A2DP_INCOMING",
        "54"=>"DISCONNECT_HID_OUTGOING",
        "55"=>"DISCONNECT_HID_INCOMING",
        "56"=>"DISCONNECT_PBAP_OUTGOING",
        "100"=>"UNPAIR",
        "101"=>"AUTO_CONNECT_PROFILES",
        "102"=>"TRANSITION_TO_STABLE",
        "103"=>"CONNECT_OTHER_PROFILES",
        "104"=>"CONNECTION_ACCESS_REQUEST_REPLY",
        "105"=>"CONNECTION_ACCESS_REQUEST_EXPIRY",
        "4000"=>"CONNECT_OTHER_PROFILES_DELAY",
        "7000"=>"CONNECTION_ACCESS_REQUEST_EXPIRY_TIMEOUT",
        "-1"=>"StateMachine.SM_QUIT_CMD",
        "-2"=>"StateMachine.SM_INIT_CMD",
    }        

    BluetoothInputProfileState = {
        "0"=>"BluetoothProfile.STATE_DISCONNECTED",
        "1"=>"BluetoothProfile.STATE_CONNECTING",
        "2"=>"BluetoothProfile.STATE_CONNECTED",
        "3"=>"BluetoothProfile.STATE_DISCONNECTING",
        #From A2DP
        "10"=>"BluetoothA2DP.STATE_PLAYING",
        "11"=>"BluetoothA2DP.STATE_NOT_PLAYING",
    }

    X60AudioOutput = {
        "0"=>"MPQ_AUDIO_OUTPUT_SPEAKER",
        "1"=>"MPQ_AUDIO_OUTPUT_SPDIF",
        "2"=>"MPQ_AUDIO_OUTPUT_BLUETOOTH_A2DP",
        "3"=>"MPQ_AUDIO_OUTPUT_SPEAKE3",
        "4"=>"MPQ_AUDIO_OUTPUT_WIRED_HEADSET",
    }

    #State defined in BoundStateMachine
    BondState = {
        "0"=>"BOND_STATE_NONE",
        "1"=>"BOND_STATE_BONDING",
        "2"=>"BOND_STATE_BONDED",
    }

    #State defined in BluetoothDevice, used in BoundStateMachine.sendIntent
    BondIntentState = {
        "10"=>"BOND_NONE",
        "11"=>"BOND_BONDING",
        "12"=>"BOND_BONDED",
    }


    ui_bt_state = nil

    rule 'BluetoothInputProfileHandler', 'InputDevice state : device: (?<bt_mac_addr>(\w|:)+)\s+State:(?<start_state>\d+)->(?<end_state>\d+)\s*', '08-10 22:42:06.965   970  2940 D BluetoothInputProfileHandler: InputDevice state : device: 00:02:76:4E:41:A6 State:1->0' do |matchdata,line|
        puts "%s <==== %s -> %s" %  [ line.strip , BluetoothInputProfileState[matchdata["start_state"]], BluetoothInputProfileState[matchdata["end_state"] ] ]
    end

    rule 'BluetoothDeviceProfileState', 'Entering ACL Connected state with:\s+(?<message_id>(-|\d)+)\s*', '08-10 22:43:09.465   970  3018 I BluetoothDeviceProfileState: Entering ACL Connected state with: 102' do |matchdata, line|
        puts "%s <==== %s " %  [ line.strip , DeviceProfileMessages[matchdata["message_id"]] ]
    end

    rule 'BluetoothAdapterState', 'Bluetooth adapter state changed:\s+(?<start_state>\d+)\s*->\s*(?<end_state>\d+)\s*',  '07-15 09:16:49.191 24049 24067 I BluetoothAdapterState: Bluetooth adapter state changed: 12-> 13' do |matchdata, line|
        puts "%s <==== %s -> %s" %  [ line.strip , States[matchdata["start_state"]], States[matchdata["end_state"] ] ]
    end

    rule 'BluetoothAdapterStateMachine', 'Bluetooth state\s+(?<start_state>\d+)\s*->\s*(?<end_state>\d+)\s*',  '08-10 22:42:42.517   970  1132 D BluetoothAdapterStateMachine: Bluetooth state 12 -> 13' do |matchdata, line|
        puts "%s <==== %s -> %s" %  [ line.strip , States[matchdata["start_state"]], States[matchdata["end_state"] ] ]
    end

    rule 'BluetoothAdapterStateMachine', '\w+\s+process message:\s+(?<message_id>\d+)\s*',  '01-04 02:04:22.620   970  1132 D BluetoothAdapterStateMachine: PowerOff process message: 1' do |matchdata, line|
        puts "%s <==== %s " %  [ line.strip , Messages[matchdata["message_id"]] ]
    end

    rule 'BluetoothAdapterStateMachine', '.*', '01-04 02:04:22.620   970  1132 D BluetoothAdapterStateMachine: PowerOff process message: 1' do |matchdata, line|
        puts "xxxx" + line
    end

    rule 'GlobalBluetoothSet', 'updateContent bluetoothState =\s+(?<state>\d+)\s*', '08-05 23:59:20.163  1474  1474 D GlobalBluetoothSet: updateContent bluetoothState = 12' do |matchdata, line|
        puts "%s <==== %s -> %s " %  [ line.strip , States[ui_bt_state], States[matchdata["state"]] ]
        ui_bt_state = matchdata["state"]
    end

    rule 'ScanTimer', '.*', '08-05 23:59:39.172  1474  3096 D ScanTimer: left time:1' do |matchdata, line|
        puts "%s <==== %s " %  [ line.strip , "GlobalBluetoothSet" ]
    end

    rule 'HeadsetReceiver', 'BluetoothA2dp.\w+ state_\w+\s*:(?<state>\d+)\s*', '08-21 19:43:37.068 D/HeadsetReceiver(  664): BluetoothA2dp.HEADSET state_headset :2' do |matchdata, line|
        puts "%s <==== %s " %  [ line.strip , BluetoothInputProfileState[matchdata["state"]] ]
    end

    rule 'HeadsetReceiver', 'Switch to audio output device id:(?<device_id>\d+)\s*', '08-21 19:43:37.068 D/HeadsetReceiver(  664): Switch to audio output device id:2' do |matchdata, line|
        puts "%s <==== %s   [Bluetooth] Don't trust it, it is deducted by HeadsetReceiver itself" %  [ line.strip , X60AudioOutput[matchdata["device_id"]] ]
    end

    rule 'BluetoothA2dpService', 'A2DP: onSinkPropertyChanged newState is: (?<state>\d+)mPlayingA2dpDevice: (?<device_id>\S+)\s*', '08-21 19:43:36.047 D/BluetoothA2dpService(  664): A2DP: onSinkPropertyChanged newState is: 2mPlayingA2dpDevice: null\s*' do |matchdata,line|
        puts "%s <==== %s " %  [ line.strip , BluetoothInputProfileState[matchdata["state"]] ]
    end

    rule 'BluetoothA2dpService', 'A2DP Playing state : device:\s+(?<device_id>\S+)\s+State:\s*(?<start_state>\d+)\s*->\s*(?<end_state>\d+)\s*', '04-08 21:48:05.224   647  6084 D BluetoothA2dpService: A2DP Playing state : device: 00:0D:44:C1:EA:51 State:11->10' do |matchdata,line|
        puts "%s <==== %s -> %s " %  [ line.strip , BluetoothInputProfileState[matchdata['start_state']], BluetoothInputProfileState[matchdata["end_state"]] ]
    end

    rule 'HidService', 'Connection state\s+(?<device_id>\S+)\s+(?<start_state>\d+)\s*->\s*(?<end_state>\d+)\s*', '03-02 14:00:18.544  2578  2578 D HidService: Connection state 0C:FC:83:81:05:FC: 0->2' do |matchdata,line|
        puts "%s <=== %s -> %s  BluetoothHid" %  [ line.strip , BluetoothInputProfileState[matchdata['start_state']], BluetoothInputProfileState[matchdata["end_state"]] ]
    end

    rule 'HidService', '.*', '03-02 13:57:47.588  2578  2578 D HidService: Received start request. Starting profile...' do |matchdata, line|
        puts "%s <==== %s " %  [ line.strip , "BluetoothHid" ]
    end


    #rule 'SignalSourceManager', 'MpqMediaService -- BluetoothA2dp.\w+ state_\w+\s*:(?<state>\d+)\s*', '08-21 19:43:37.068 D/HeadsetReceiver(  664): BluetoothA2dp.HEADSET state_headset :2' do |matchdata, line|
        #puts "%s <==== %s " %  [ line.strip , BluetoothInputProfileState[matchdata["state"]] ]
    #end

    rule 'Launcher', 'T2LauncherApplication -- kill launcher as Configuration change\s*', '04-08 21:48:02.551  8379  8379 D Launcher: T2LauncherApplication -- kill launcher as Configuration change' do |matchdata, line|
        puts "%s <==== %s " %  [ line.strip , "Bluetooth: Change language, lunch killed" ]
    end

    rule "BluetoothBondStateMachine", '\s*Bond State Change Intent:(?<btaddr>..:..:..:..:..:..) OldState: (?<old_state>\d+) NewState: (?<new_state>\d+)\s*', '10-13 18:53:08.728  2554  3502 I BluetoothBondStateMachine: Bond State Change Intent:0C:FC:83:81:05:FC OldState: 10 NewState: 11' do |matchdata, line|
        puts "%s <=====   %s --> %s" % [ line.strip, BondIntentState[matchdata["old_state"]], BondIntentState[matchdata["new_state"]] ]
    end

    rule "BluetoothBondStateMachine", '\s*bondStateChangeCallback: Status: (?<status>\d+) Address: (?<btaddr>..:..:..:..:..:..) newState: (?<new_state>\d+)\s*', '10-13 18:53:13.872  2554  3500 I BluetoothBondStateMachine: bondStateChangeCallback: Status: 10 Address: 0C:FC:83:81:05:FC newState: 0' do |matchdata,line|
        puts "%s <=====   Adapter Status: %s --> BondState: %s" % [ line.strip, BondIntentState[matchdata["status"]], BondState[matchdata["new_state"]] ]
    end
end


Main {
    option('vendor', 'v'){
        argument_required
        cast :string
        description "log file format [mstar|qualcomm]"
    }

    option('test', 't'){
        description 'Perform interal test function'
    }

    option('dump', 'd'){
        description 'Dump all the rules'
    }

    argument('file'){
        description "intput file name, default get from stdin"
        cast :string
        default "-"
    }

    def initialize
        @input_io = $stdin
        @output_io = $stdout
    end

    def detect_vendor
        first_line = @input_io.readline 
        while /^\d\d/ !~ first_line do
            puts first_line
            first_line = @input_io.readline 
        end

        Android::LogScan::Config.inst.vendor = Android::LogScan::Rule.detect_vendor first_line
    end

    def run
        if params['file'].given?
            @input_io = File.open( params['file'].value, "r" )
        end

        if params['test'].given?
            detect_vendor
            puts Android::LogScan::Config.inst.vendor
            exit
        end


        if !param['vendor'].given?
            detect_vendor
        end

        if params['dump'].given?
            BluetoothAdapter.dump( Android::LogScan::Config.inst.vendor )
            exit
        end

        @input_io.each_line do |line|
            begin
                if ! BluetoothAdapter.match_line( line )
                    puts line
                end
            rescue => ex
                if ex.is_a? ArgumentError
                    puts line
                    if ex.message =~ /invalid byte sequence in UTF-8/
                        puts line
                    else
                        raise ex
                    end
                end
            end
        end
    end
}
